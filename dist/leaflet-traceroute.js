/*! For license information please see leaflet-traceroute.js.LICENSE */
!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=4)}([function(t,e){t.exports=L},function(t,e,i){(function(t){t.Marker.Traceroute=t.Marker.extend({initialize:function(e,i){this.fellow={},this.data={},t.Marker.prototype.initialize.call(this,e,i)},options:{autoPan:!0},bearingTo:function(t){let e=Math.PI/180,i=this._latlng.lat*e,n=t.lat*e,o=this._latlng.lng*e,r=t.lng*e,a=Math.sin(r-o)*Math.cos(n),s=Math.cos(i)*Math.sin(n)-Math.sin(i)*Math.cos(n)*Math.cos(r-o);return(180*Math.atan2(a,s)/Math.PI+360)%360},distanceTo:function(t){return this._map.distance(this._latlng,t)},export:function(){return{}}})}).call(this,i(0))},function(t,e,i){!function(t,e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function n(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function r(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<i;e++)for(var r=arguments[e],a=0,s=r.length;a<s;a++,o++)n[o]=r[a];return n}var a=function(){function t(t){this.options={wrap:!0,steps:3},this.ellipsoid={a:6378137,b:6356752.3142,f:1/298.257223563},this.options=o(o({},this.options),t)}return t.prototype.toRadians=function(t){return t*Math.PI/180},t.prototype.toDegrees=function(t){return 180*t/Math.PI},t.prototype.wrap360=function(t){return 0<=t&&t<360?t:(t%360+360)%360},t.prototype.wrap180=function(t){return-180<=t&&t<180?t:((t+180)%360+360)%360-180},t.prototype.direct=function(t,e,i,n){void 0===n&&(n=100);var o=this.toRadians(t.lat),r=this.toRadians(t.lng),a=this.toRadians(e),s=i,c=1e3*Number.EPSILON,l=this.ellipsoid,h=l.a,u=l.b,p=l.f,d=Math.sin(a),f=Math.cos(a),g=(1-p)*Math.tan(o),y=1/Math.sqrt(1+g*g),m=g*y,_=Math.atan2(g,f),v=y*d,b=1-v*v,M=b*(h*h-u*u)/(u*u),w=1+M/16384*(4096+M*(M*(320-175*M)-768)),L=M/1024*(256+M*(M*(74-47*M)-128)),k=s/(u*w),x=null,T=null,O=null,P=null,H=0;do{O=Math.cos(2*_+k),P=k,k=s/(u*w)+L*(x=Math.sin(k))*(O+L/4*((T=Math.cos(k))*(2*O*O-1)-L/6*O*(4*x*x-3)*(4*O*O-3)))}while(Math.abs(k-P)>c&&++H<n);if(H>=n)throw new EvalError("Direct vincenty formula failed to converge after "+n+" iterations (start="+t.lat+"/"+t.lng+"; bearing="+e+"; distance="+i+")");var R=m*x-y*T*f,S=Math.atan2(m*T+y*x*f,(1-p)*Math.sqrt(v*v+R*R)),E=p/16*b*(4+p*(4-3*b)),D=r+(Math.atan2(x*d,y*T-m*x*f)-(1-E)*p*v*(k+E*x*(O+E*T*(2*O*O-1)))),C=Math.atan2(v,-R);return{lat:this.toDegrees(S),lng:this.toDegrees(D),bearing:this.wrap360(this.toDegrees(C))}},t.prototype.inverse=function(t,i,n,o){void 0===n&&(n=100),void 0===o&&(o=!0);var r=t,a=i,s=this.toRadians(r.lat),c=this.toRadians(r.lng),l=this.toRadians(a.lat),h=this.toRadians(a.lng),u=Math.PI,p=Number.EPSILON,d=this.ellipsoid,f=d.a,g=d.b,y=d.f,m=h-c,_=(1-y)*Math.tan(s),v=1/Math.sqrt(1+_*_),b=_*v,M=(1-y)*Math.tan(l),w=1/Math.sqrt(1+M*M),L=M*w,k=Math.abs(m)>u/2||Math.abs(l-s)>u/2,x=m,T=null,O=null,P=k?u:0,H=0,R=k?-1:1,S=null,E=1,D=null,C=1,N=null,A=null,j=0;do{if(S=w*(T=Math.sin(x))*(w*T)+(v*L-b*w*(O=Math.cos(x)))*(v*L-b*w*O),Math.abs(S)<p)break;if(R=b*L+v*w*O,A=x,x=m+(1-(N=y/16*(C=1-(D=v*w*T/(H=Math.sqrt(S)))*D)*(4+y*(4-3*C))))*y*D*((P=Math.atan2(H,R))+N*H*((E=0!==C?R-2*b*L/C:0)+N*R*(2*E*E-1))),(k?Math.abs(x)-u:Math.abs(x))>u)throw new EvalError("λ > π")}while(Math.abs(x-A)>1e-12&&++j<n);if(j>=n){if(o)return this.inverse(t,new e.LatLng(i.lat,i.lng-.01),n,o);throw new EvalError("Inverse vincenty formula failed to converge after "+n+" iterations (start="+t.lat+"/"+t.lng+"; dest="+i.lat+"/"+i.lng+")")}var B=C*(f*f-g*g)/(g*g),W=B/1024*(256+B*(B*(74-47*B)-128)),F=g*(1+B/16384*(4096+B*(B*(320-175*B)-768)))*(P-W*H*(E+W/4*(R*(2*E*E-1)-W/6*E*(4*H*H-3)*(4*E*E-3)))),G=Math.abs(S)<p?0:Math.atan2(w*T,v*L-b*w*O),I=Math.abs(S)<p?u:Math.atan2(v*T,-b*w+v*L*O);return{distance:F,initialBearing:Math.abs(F)<p?NaN:this.wrap360(this.toDegrees(G)),finalBearing:Math.abs(F)<p?NaN:this.wrap360(this.toDegrees(I))}},t.prototype.intersection=function(t,i,n,o){var r=this.toRadians(t.lat),a=this.toRadians(t.lng),s=this.toRadians(n.lat),c=this.toRadians(n.lng),l=this.toRadians(i),h=this.toRadians(o),u=s-r,p=c-a,d=Math.PI,f=Number.EPSILON,g=2*Math.asin(Math.sqrt(Math.sin(u/2)*Math.sin(u/2)+Math.cos(r)*Math.cos(s)*Math.sin(p/2)*Math.sin(p/2)));if(Math.abs(g)<f)return t;var y=(Math.sin(s)-Math.sin(r)*Math.cos(g))/(Math.sin(g)*Math.cos(r)),m=(Math.sin(r)-Math.sin(s)*Math.cos(g))/(Math.sin(g)*Math.cos(s)),_=Math.acos(Math.min(Math.max(y,-1),1)),v=Math.acos(Math.min(Math.max(m,-1),1)),b=l-(Math.sin(c-a)>0?_:2*d-_),M=(Math.sin(c-a)>0?2*d-v:v)-h;if(0===Math.sin(b)&&0===Math.sin(M))return null;if(Math.sin(b)*Math.sin(M)<0)return null;var w=-Math.cos(b)*Math.cos(M)+Math.sin(b)*Math.sin(M)*Math.cos(g),L=Math.atan2(Math.sin(g)*Math.sin(b)*Math.sin(M),Math.cos(M)+Math.cos(b)*w),k=Math.asin(Math.sin(r)*Math.cos(L)+Math.cos(r)*Math.sin(L)*Math.cos(l));if(isNaN(k))return null;var x=a+Math.atan2(Math.sin(l)*Math.sin(L)*Math.cos(r),Math.cos(L)-Math.sin(r)*Math.sin(k));return new e.LatLng(this.toDegrees(k),this.toDegrees(x))},t.prototype.midpoint=function(t,i){var n=this.toRadians(t.lat),o=this.toRadians(t.lng),r=this.toRadians(i.lat),a=this.toRadians(i.lng-t.lng),s=Math.cos(n),c=Math.sin(n),l={x:s+Math.cos(r)*Math.cos(a),y:0+Math.cos(r)*Math.sin(a),z:c+Math.sin(r)},h=Math.atan2(l.z,Math.sqrt(l.x*l.x+l.y*l.y)),u=o+Math.atan2(l.y,l.x);return new e.LatLng(this.toDegrees(h),this.toDegrees(u))},t}(),s=function(){function t(t){this.geodesic=new a,this.options={wrap:!0,steps:3},this.options=o(o({},this.options),t),this.steps=void 0===this.options.steps?3:this.options.steps}return t.prototype.recursiveMidpoint=function(t,e,i){var n=[t,e],o=this.geodesic.midpoint(t,e);return this.options.wrap&&(o.lng=this.geodesic.wrap180(o.lng)),i>0?(n.splice.apply(n,r([0,1],this.recursiveMidpoint(t,o,i-1))),n.splice.apply(n,r([n.length-2,2],this.recursiveMidpoint(o,e,i-1)))):n.splice(1,0,o),n},t.prototype.line=function(t,e){return this.recursiveMidpoint(t,e,Math.min(8,this.steps))},t.prototype.circle=function(t,i){for(var n=[],o=0;o<this.steps+1;o++){var r=this.geodesic.direct(t,360/this.steps*o,i);n.push(new e.LatLng(r.lat,r.lng))}return n},t.prototype.multiLineString=function(t){var e=this,i=[];return t.forEach((function(t){for(var n=[],o=1;o<t.length;o++)n.splice.apply(n,r([n.length-1,1],e.line(t[o-1],t[o])));i.push(n)})),i},t.prototype.lineString=function(t){return this.multiLineString([t])[0]},t.prototype.splitLine=function(t,i){var n={point:new e.LatLng(89,-180),bearing:180},o={point:new e.LatLng(89,180),bearing:180};t.lng=Math.max(-179.9,t.lng),t.lng=Math.min(179.9,t.lng),i.lng=Math.max(-179.9,i.lng),i.lng=Math.min(179.9,i.lng);var r,a=this.geodesic.inverse(t,i);return(r=a.initialBearing>180?this.geodesic.intersection(t,a.initialBearing,n.point,n.bearing):this.geodesic.intersection(t,a.initialBearing,o.point,o.bearing))&&this.geodesic.inverse(t,r).distance<a.distance?r.lng<-179.9999?[[t,r],[new e.LatLng(r.lat,r.lng+360),i]]:r.lng>179.9999?[[t,r],[new e.LatLng(r.lat,r.lng-360),i]]:[[t,r],[r,i]]:[[t,i]]},t.prototype.splitMultiLineString=function(t){var e=this,i=[];return t.forEach((function(t){for(var n=[t[0]],o=1;o<t.length;o++){var r=e.splitLine(t[o-1],t[o]);1===r.length?n.push(t[o]):(n.push(r[0][1]),i.push(n),n=r[1])}i.push(n)})),i},t.prototype.distance=function(t,e){return this.geodesic.inverse(t,e).distance},t.prototype.multilineDistance=function(t){var e=this,i=[];return t.forEach((function(t){for(var n=0,o=1;o<t.length;o++)n+=e.distance(t[o-1],t[o]);i.push(n)})),i},t.prototype.updateStatistics=function(t,e){var i={};return i.distanceArray=this.multilineDistance(t),i.totalDistance=i.distanceArray.reduce((function(t,e){return t+e}),0),i.points=0,t.forEach((function(t){i.points+=t.reduce((function(t){return t+1}),0)})),i.vertices=0,e.forEach((function(t){i.vertices+=t.reduce((function(t){return t+1}),0)})),i},t}();function c(t){return"object"==typeof t&&null!==t&&"lat"in t&&"lng"in t&&"number"==typeof t.lat&&"number"==typeof t.lng}function l(t){return t instanceof Array&&"number"==typeof t[0]&&"number"==typeof t[1]}function h(t){return t instanceof e.LatLng||!!l(t)||!!c(t)}function u(t){if(t instanceof e.LatLng)return t;if(l(t))return new e.LatLng(t[0],t[1]);if(c(t))return new e.LatLng(t.lat,t.lng);throw new Error("L.LatLngExpression expected. Unknown object found.")}var p=function(t){function i(i,n){var r=t.call(this,[],n)||this;return r.defaultOptions={wrap:!0,steps:3},r.statistics={},r.points=[],e.Util.setOptions(r,o(o({},r.defaultOptions),n)),r.geom=new s(r.options),void 0!==i&&r.setLatLngs(i),r}return n(i,t),i.prototype.updateGeometry=function(){var e=[];if(this.points.length>0&&this.points[0].length>=2)if(e=this.geom.multiLineString(this.points),this.options.wrap){var i=this.geom.splitMultiLineString(e);t.prototype.setLatLngs.call(this,i)}else t.prototype.setLatLngs.call(this,e);else t.prototype.setLatLngs.call(this,e);this.statistics=this.geom.updateStatistics(this.points,e)},i.prototype.setLatLngs=function(t){return this.points=function(t){for(var e=[],i=function(i){if(h(i)){var n=[];return t.forEach((function(t){n.push(u(t))})),e.push(n),"break"}if(!(i instanceof Array))throw new Error("L.LatLngExpression[] | L.LatLngExpression[][] expected. Unknown object found.");if(!h(i[0]))throw new Error("L.LatLngExpression[] | L.LatLngExpression[][] expected. Unknown object found.");var o=[];i.forEach((function(t){o.push(u(t))})),e.push(o)},n=0,o=t;n<o.length&&"break"!==i(o[n]);n++);return e}(t),this.updateGeometry(),this},i.prototype.addLatLng=function(t,e){var i=u(t);return 0===this.points.length?this.points.push([i]):void 0===e?this.points[this.points.length-1].push(i):e.push(i),this.updateGeometry(),this},i.prototype.fromGeoJson=function(t){var i=[],n=[];return"FeatureCollection"===t.type?n=t.features:"Feature"===t.type?n=[t]:["MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"].includes(t.type)?n=[{type:"Feature",geometry:t,properties:{}}]:console.log('[Leaflet.Geodesic] fromGeoJson() - Type "'+t.type+'" not supported.'),n.forEach((function(t){switch(t.geometry.type){case"MultiPoint":case"LineString":i=r(i,[e.GeoJSON.coordsToLatLngs(t.geometry.coordinates,0)]);break;case"MultiLineString":case"Polygon":i=r(i,e.GeoJSON.coordsToLatLngs(t.geometry.coordinates,1));break;case"MultiPolygon":t.geometry.coordinates.forEach((function(t){i=r(i,e.GeoJSON.coordsToLatLngs(t,1))}));break;default:console.log('[Leaflet.Geodesic] fromGeoJson() - Type "'+t.geometry.type+'" not supported.')}})),i.length&&this.setLatLngs(i),this},i.prototype.distance=function(t,e){return this.geom.distance(u(t),u(e))},i}(e.Polyline),d=function(t){function i(i,n){var r=t.call(this,[],n)||this;r.defaultOptions={wrap:!0,steps:24,fill:!0,noClip:!0},r.statistics={},e.Util.setOptions(r,o(o({},r.defaultOptions),n));var a=r.options;return r.radius=void 0===a.radius?1e6:a.radius,r.center=void 0===i?new e.LatLng(0,0):u(i),r.geom=new s(r.options),r.update(),r}return n(i,t),i.prototype.update=function(){var t=this.geom.circle(this.center,this.radius);this.statistics=this.geom.updateStatistics([[this.center]],[t]),this.statistics.totalDistance=this.geom.multilineDistance([t]).reduce((function(t,e){return t+e}),0),this.setLatLngs(t)},i.prototype.distanceTo=function(t){var e=u(t);return this.geom.distance(this.center,e)},i.prototype.setLatLng=function(t){this.center=u(t),this.update()},i.prototype.setRadius=function(t){this.radius=t,this.update()},i}(e.Polyline);e.Geodesic=p,e.geodesic=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new(p.bind.apply(p,r([void 0],t)))},e.GeodesicCircle=d,e.geodesiccircle=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new(d.bind.apply(d,r([void 0],t)))},t.GeodesicCircleClass=d,t.GeodesicLine=p,Object.defineProperty(t,"__esModule",{value:!0})}(e,i(0))},function(t,e,i){(function(t){var e,i,n;e=t.Marker.prototype._initIcon,i=t.Marker.prototype._setPos,n="msTransform"===t.DomUtil.TRANSFORM,t.Marker.addInitHook((function(){var t=this.options.icon&&this.options.icon.options&&this.options.icon.options.iconAnchor;t&&(t=t[0]+"px "+t[1]+"px"),this.options.rotationOrigin=this.options.rotationOrigin||t||"center bottom",this.options.rotationAngle=this.options.rotationAngle||0,this.on("drag",(function(t){t.target._applyRotation()}))})),t.Marker.include({_initIcon:function(){e.call(this)},_setPos:function(t){i.call(this,t),this._applyRotation()},_applyRotation:function(){this.options.rotationAngle&&(this._icon.style[t.DomUtil.TRANSFORM+"Origin"]=this.options.rotationOrigin,n?this._icon.style[t.DomUtil.TRANSFORM]="rotate("+this.options.rotationAngle+"deg)":this._icon.style[t.DomUtil.TRANSFORM]+=" rotateZ("+this.options.rotationAngle+"deg)")},setRotationAngle:function(t){return this.options.rotationAngle=t,this.update(),this},setRotationOrigin:function(t){return this.options.rotationOrigin=t,this.update(),this}})}).call(this,i(0))},function(t,e,i){"use strict";i.r(e);var n=i(0),o=i.n(n);i(5),i(8),i(9),i(12),i(15),i(17),i(2),i(18);o.a.Control.Traceroute=o.a.Control.extend({options:{cursor:"crosshair",tools:{route:{icon:"☡",title:"Start a route",handler:o.a.Handler.RouteBase,waypoint:{icon:o.a.divIcon({className:"leaflet-traceroute-icon",html:"<span class='leaflet-traceroute-point'></span>",iconAnchor:[20,18],iconSize:[40,40]}),popup:t=>`<pre>${JSON.stringify(o.a.Control.Traceroute.extract(t.export()),null,2)}</pre>`,tooltip:t=>`<pre>${JSON.stringify(o.a.Control.Traceroute.extract(t.export()),null,2)}</pre>`},midpoint:{icon:o.a.divIcon({className:"leaflet-traceroute-icon",html:"<div class='leaflet-traceroute-arrow'></div>",iconAnchor:[20,18],iconSize:[40,40]}),tooltip:"Click to insert a waypoints here",opacity:.5},trace:{weight:5,opacity:.5,color:"black"},pointer:{dashArray:"8"}},bearing:{icon:"∡",title:"Radio Navigation",handler:o.a.Handler.BearingBase,marker:{icon:o.a.divIcon({className:"leaflet-traceroute-icon",html:"<span class='leaflet-traceroute-losange'></span>",iconAnchor:[20,18],iconSize:[40,40]}),tooltip:t=>`<pre>${JSON.stringify(o.a.Control.Traceroute.extract(t.export()),null,2)}</pre>`},trace:{dashArray:"5,5,1,5",opacity:.3,color:"grey"},pointer:{dashArray:"8"}},track:{icon:"✈",title:"Track Position",handler:o.a.Handler.TrackBase,marker:{icon:o.a.divIcon({className:"leaflet-traceroute-icon",html:"<div class='leaflet-traceroute-airplane'></div>",iconAnchor:[20,18],iconSize:[40,40]}),tooltip:t=>`<pre>${JSON.stringify(o.a.Control.Traceroute.extract(t.export()),null,2)}</pre>`},circle:{},trace:{weight:5,opacity:.5,color:"black"},locate:{enableHighAccuracy:!0,timeout:5e3,maximumAge:0,setView:!0}},clear:{icon:"✗",title:"Clear routes",handler:o.a.Handler.ClearBase}}},initialize:function(t){o.a.Control.Traceroute.mergeDeep(this.options,t)},onAdd:function(t){this._map=t,this._routes.addTo(t),this.handler=new o.a.Handler.Traceroute(t,this);for(let e of Object.values(this.options.tools))void 0!==e&&(e.handler=new e.handler(t,this,e));let e=document.createElement("div");e.classList.add("leaflet-bar"),o.a.DomEvent.disableClickPropagation(e);for(const t of Object.values(this.options.tools))void 0!==t&&e.appendChild(this._createControl(t.icon,t.title,this._toggleMode(t.handler)));return e},onRemove:function(t){this._routes.removeTo(this._map),this.handlers.routeBase.disable(),this.handlers.bearingStart.disable()},export:function(){let t={routes:[]};return this._routes.eachLayer((function(e){t.routes.push(e.export())}),this),t},_createControl:function(t,e,i){let n=document.createElement("a");return n.innerHTML=t,n.classList.add("leaflet-traceroute"),n.setAttribute("title",e),n.setAttribute("href","#"),n.setAttribute("role","button"),o.a.DomEvent.on(n,"click",i,this),n},_routes:o.a.layerGroup(),_toggleMode:function(t){return function(e){return e&&e.target&&(t.target=e.target),t.enabled()?t.disable():t.enable(),t.enabled()}},statics:{format:function(t,e){if("number"!=typeof t)return`- ${e}`;switch(void 0===e&&t>=1e3&&(e="km"),e){case"km":return`${(t/1e3).toFixed(1)}${e}`;case"mi":return`${(t/1609.344).toFixed(1)}${e}`;case"NM":return`${(t/1852).toFixed(1)}${e}`;case"km/h":return`${(t/1e3*3600).toFixed(0)}${e}`;case"ft/min":return`${(t/.3048*60).toFixed(0)}${e}`;case"kt":return`${(t/1852*3600).toFixed(0)}${e}`;case"ft":return`${(t/.3048).toFixed(0)}${e}`;case"°":return`${t.toFixed(1)}${e}`;case"time":return new Date(t).toUTCString().slice(-12);default:e="m";case"m":return`${t.toFixed(0)}${e}`}},extract:function(t){const e={latitude:"°",longitude:"°",out:"°",in:"°",distance:"NM",totalDistance:"NM",qdr:"°",qdm:"°",distance:"NM",altitude:"ft",vario:"ft/min",accuracy:"m",altitudeAccuracy:"m",heading:"°",bearing:"°",speed:"kt",estimatedSpeed:"kt",time:"time"};let i={};for(let[n,o]of Object.entries(t))void 0!==e[n]&&(i[n]=this.format(o,e[n]));return i},mergeDeep:function t(e,...i){const n=t=>t&&"object"==typeof t&&!Array.isArray(t);if(!i.length)return e;const o=i.shift();if(n(e)&&n(o))for(const i in o)n(o[i])?(e[i]||Object.assign(e,{[i]:{}}),t(e[i],o[i])):Object.assign(e,{[i]:o[i]});t(e,...i)}}}),o.a.control.traceroute=function(t){return new o.a.Control.Traceroute(t)}},function(t,e,i){"use strict";(function(t){i(6),i(7),i(2);t.LayerGroup.Route=t.LayerGroup.extend({options:{bubblingMouseEvents:!1,trace:{bubblingMouseEvents:!1},waypoint:{bubblingMouseEvents:!1,draggable:!0},midpoint:{bubblingMouseEvents:!1}},initialize:function(e,i){t.Control.Traceroute.mergeDeep(this.options,i),this._layers={},this.editHandler=new t.Handler.RouteEdit(this),this.trace=new t.Geodesic([],this.options.trace).addTo(this),this.midpoints=(new t.FeatureGroup).addTo(this),this.waypoints=(new t.FeatureGroup).on("layerremove",this.clean,this).on("layerremove",this._handleSiblings,this).on("layeradd layerremove",this._handleParent,this).on("layeradd layerremove move",this._draw,this).on("layeradd layerremove move update",this._fireWithLayer,this).on("layeradd",(function(t){t.layer.on("move",this._draw,this).on("move",this._fireWithLayer,this)}),this).addTo(this),this.data={}},export:function(){return this.data.id=this._leaflet_id,this.data.waypoints=[],this.waypoints.getLayers()[0].tolast(t=>this.data.waypoints.push(t.export())),this.data},clean:function(){return!(this.waypoints.getLayers().length<2)||(this.waypoints.clearLayers(),!1)},createWaypoint:function(e){let i;return i=e.layer?[e.layer.previous,e.layer.next]:this.waypoints.getLayers().length>0?[this.waypoints.getLayers()[0].tolast(),void 0]:[null,null],new t.Marker.Waypoint(e.latlng,this.options.waypoint).setSiblings(...i).addTo(this.waypoints)},_draw:function(e){let i;i=e.layer instanceof t.Marker.Waypoint&&e.layer.parent instanceof t.LayerGroup.Route?e.layer:e.layer instanceof t.Marker.Waypoint?e.layer.previous||e.layer.next:e.target instanceof t.Marker.Waypoint?e.target:this.waypoints.getLayers()[0],this.trace.setLatLngs([]),this.midpoints.clearLayers(),i instanceof t.Marker.Waypoint&&i.tofirst().tolast(e=>{e._decorate(),this.trace.addLatLng(e.getLatLng()),e.previous instanceof t.Marker.Waypoint&&this.midpoints.addLayer(this._drawMidpoint(e.previous,e))}),this._mapToAdd.fire("traceroute:route:update",this)},_drawMidpoint:function(e,i){if(e instanceof t.Marker.Waypoint&&i instanceof t.Marker.Waypoint){let{initialBearing:n,finalBearing:o}=this.trace.geom.geodesic.inverse(e.getLatLng(),i.getLatLng()),r=new t.Marker(this.trace.geom.geodesic.midpoint(e.getLatLng(),i.getLatLng()),t.extend({rotationAngle:Math.round((n+o)/2)%360},this.options.midpoint));return r.previous=e,r.next=i,r}return null},_fireWithLayer:function(t){this._mapToAdd.fire(`traceroute:waypoint:${t.type.replace("layer","")}`,t.layer||t.target)},_handleParent:function(t){switch(t.type){case"layeradd":t.layer.parent=this;break;case"layerremove":delete t.layer.parent}},_handleSiblings:function(e){e.layer.next instanceof t.Marker.Waypoint&&e.layer.next.setSiblings(e.layer.previous,!1),e.layer.previous instanceof t.Marker.Waypoint&&e.layer.previous.setSiblings(!1,e.layer.next)}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(1),i(3),i(2);t.Marker.Waypoint=t.Marker.Traceroute.extend({geodesic:t.geodesic().geom.geodesic,export:function(){return this.data.id=this._leaflet_id,void 0!==this.fellow.bearings&&(this.data.bearings=this.fellow.bearings.map(t=>t.export())),this.previous instanceof t.Marker.Waypoint&&(this.data.previous_id=this.previous._leaflet_id),this.next instanceof t.Marker.Waypoint&&(this.data.next_id=this.next._leaflet_id),this.data},registerBearing:function(t){return void 0===this.fellow.bearings&&(this.fellow.bearings=[]),this.fellow.bearings.push(t),this},setSiblings:function(e,i){return e instanceof t.Marker.Waypoint?(this.previous=e,e.next=this):null==e&&(this.previous=null),i instanceof t.Marker.Waypoint?(this.next=i,i.previous=this):null==i&&(this.next=null),this.fire("update",this,!0),this},_decorate:function(){if(this.data.position=this._latlng,this.previous instanceof t.Marker.Waypoint){let t=this.geodesic.inverse(this.previous.getLatLng(),this.getLatLng());this.data.in=Number(t.finalBearing.toPrecision(5)),this.data.distance=Number(t.distance.toPrecision(5)),this.data.totalDistance=(this.previous.data.totalDistance||0)+this.data.distance}if(this.next instanceof t.Marker.Waypoint){let t=this.geodesic.inverse(this.getLatLng(),this.next.getLatLng());this.data.out=Number(t.initialBearing.toPrecision(5))}return this.togglePopup().togglePopup().toggleTooltip().toggleTooltip(),this},tofirst:function(t){return this._follow(t,t=>t.previous)},tolast:function(t){return this._follow(t,t=>t.next)},_follow:function(e,i){let n,o=this;for(;o instanceof t.Marker.Waypoint;)n=o,"function"==typeof e&&e.call(this,n),o=i(n);return n}})}).call(this,i(0))},function(t,e,i){(function(t){t.Handler.RouteEdit=t.Handler.extend({initialize:function(t){this._route=t},addHooks:function(){this._route.midpoints.on("click",this._route.createWaypoint,this._route),void 0!==this._route.options.midpoint.tooltip&&this._route.midpoints.bindTooltip(this._route.options.midpoint.tooltip,{direction:"auto"}),this._route.waypoints.on("contextmenu",this._removeLayer,this._route.waypoints).eachLayer(t=>t.dragging.enable()),void 0!==this._route.options.waypoint.tooltip&&this._route.waypoints.bindTooltip(this._route.options.waypoint.tooltip,{direction:"auto"}),void 0!==this._route.options.waypoint.popup&&this._route.waypoints.unbindPopup()},removeHooks:function(){this._route.midpoints.off("click",this._route.createWaypoint,this._route),void 0!==this._route.options.midpoint.tooltip&&this._route.midpoints.unbindTooltip(),this._route.waypoints.off("contextmenu",this._removeLayer,this._route.waypoints).eachLayer(t=>t.dragging.disable()),void 0!==this._route.options.waypoint.tooltip&&this._route.waypoints.unbindTooltip(),void 0!==this._route.options.waypoint.popup&&this._route.waypoints.bindPopup(this._route.options.waypoint.popup)},_removeLayer:function(t){this.removeLayer(t.layer)}})}).call(this,i(0))},function(t,e,i){(function(t){t.Handler.Traceroute=t.Handler.extend({initialize:function(t,e){this._map=t,this._control=e,this._oldSettings={}},addHooks:function(){this._oldSettings.cursor=this._map._container.style.cursor,this._map._container.style.cursor=this._control.options.cursor,this._oldSettings.doubleClickZoom=this._map.doubleClickZoom.enabled(),this._map.doubleClickZoom.disable()},removeHooks:function(){this._map._container.style.cursor=this._oldSettings.cursor,this._oldSettings.doubleClickZoom&&this._map.doubleClickZoom.enable()}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(10);t.Handler.RouteBase=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this._control=i,this.startHandler=new t.Handler.RouteStart(this._map,i._routes,n)},addHooks:function(){void 0!==this._control.options.tools.bearing&&this._control.options.tools.bearing.handler.disable(),this._control.handler.enable(),this.target.style.filter="invert(1)",t.DomEvent.on(document,"keydown",this._onKeyDown,this),this._map.fire("traceroute:route:start",this._control),this.startHandler.enable()},removeHooks:function(){t.DomEvent.off(document,"keydown",this._onKeyDown,this),this._map.fire("traceroute:route:stop",this._control),this.target.style.filter="invert(0)",this._control.handler.disable(),this.startHandler.traceHandler.disable(),this.startHandler.disable()},_onKeyDown:function(t){switch(t.keyCode){case 27:this.disable()}}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(11);t.Handler.RouteStart=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this._routes=i,this.traceHandler=new t.Handler.RouteTrace(this,i,n)},addHooks:function(){this._map.on("click",this._startRoute,this),this._routes.eachLayer((function(t){t.editHandler.enable(),t.waypoints.on("click",this._resumeRoute,this)}),this)},removeHooks:function(){this._map.off("click",this._startRoute,this),this._routes.eachLayer((function(t){t.editHandler.disable(),t.waypoints.off("click",this._resumeRoute,this)}),this)},_startRoute:function(t){this.traceHandler.enable(),this.traceHandler._createPoint(t)},_resumeRoute:function(t){this.traceHandler._route=t.layer.parent,this.traceHandler._route.editHandler.disable(),this.traceHandler.enable(),map.fire("traceroute:route:resume",this.traceHandler._route)}})}).call(this,i(0))},function(t,e,i){(function(t){t.Handler.RouteTrace=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._parent=e,this._map=e._map,this._routes=i,this._pointerTrace=new t.Geodesic([],n.pointer)},addHooks:function(){this._parent.disable(),this._clearPointerTrace(),this._pointerTrace.addTo(this._map),this._map.on("mousemove",this._drawPointer,this).on("click",this._createPoint,this),t.DomEvent.on(document,"keydown",this._onKeyDown,this),this._route||this._createRoute(),this._route.waypoints.on("click",this._finishRouteIfLast,this)},removeHooks:function(){this._clearPointerTrace(),this._pointerTrace.removeFrom(this._map),this._map.off("mousemove",this._drawPointer,this).off("click",this._createPoint,this),t.DomEvent.off(document,"keydown",this._onKeyDown,this),this._route.waypoints.off("click",this._finishRouteIfLast,this),this._route=null,this._parent.enable()},_createRoute:function(){return this._map.fire("traceroute:route:new",this._route),this._route=new t.LayerGroup.Route([],this.options).addTo(this._routes)},_createPoint:function(t){return this._route||this._createRoute(),this._route.createWaypoint(t)},_finishRouteIfLast:function(t){t.layer===t.layer.tolast()&&this._finishRoute()},_finishRoute:function(){return this._route.clean()?(this._map.fire("traceroute:route:finish",this._route),this._route.editHandler.enable()):(this._map.fire("traceroute:route:abort",this._route),this._route.remove()),this.disable(),this._route},_drawPointer:function(t){this._route&&this._route.waypoints.getLayers().length>0&&this._pointerTrace.setLatLngs([this._route.waypoints.getLayers()[0].tolast().getLatLng(),t.latlng])},_clearPointerTrace:function(){this._pointerTrace.setLatLngs([])},_onKeyDown:function(t){switch(t.keyCode){case 27:this._finishRoute()}}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(13);t.Handler.BearingBase=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this._control=i,this.bearings=(new t.FeatureGroup).addTo(this._map),this.traces=new t.Polyline([],this.options.trace).addTo(this._map),this.traceHandler=new t.Handler.BearingTrace(this._map,this.bearings,this.options)},addHooks:function(){this._control.options.tools.route.handler.disable(),this._control.handler.enable(),this.target.style.filter="invert(1)",this._control._routes.eachLayer((function(t){t.waypoints.on("click",this._selectOrigin,this)}),this),this.bearings.bindTooltip(this.options.marker.tooltip,{direction:"auto"}).unbindPopup().eachLayer(t=>t.dragging.enable()),t.DomEvent.on(document,"keydown",this._onKeyDown,this),this._map.fire("traceroute:bearing:start",this._control)},removeHooks:function(){t.DomEvent.off(document,"keydown",this._onKeyDown,this),this.bearings.bindPopup(this.options.marker.tooltip,{direction:"auto"}).unbindTooltip().eachLayer(t=>t.dragging.disable()),this._control._routes.eachLayer((function(t){t.waypoints.off("click",this._selectOrigin,this)}),this),this._control.handler.disable(),this.target.style.filter="invert(0)",this.traceHandler.disable(),this._map.fire("traceroute:bearing:stop",this._control)},_selectOrigin:function(t){this.traceHandler.origin=t.layer,this.traceHandler.enable()},_onKeyDown:function(t){switch(t.keyCode){case 27:this.disable()}}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(14);t.Handler.BearingTrace=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this.bearings=i,this._pointer=new t.Polyline([],n.pointer)},addHooks:function(){this._clearPointer(),this._pointer.addTo(this._map),this._map.on("mousemove",this._drawPointer,this).on("click",this._setBearing,this),t.DomEvent.on(document,"keydown",this._onKeyDown,this),this.origin||this.disable()},removeHooks:function(){this._clearPointer(),this._pointer.removeFrom(this._map),this._map.off("mousemove",this._drawPointer,this).off("click",this._setBearing,this),t.DomEvent.off(document,"keydown",this._onKeyDown,this),this.origin=null},_setBearing:function(e){new t.Marker.Bearing(e.latlng,t.extend({draggable:!0},this.options.marker,{trace:this.options.trace})).addTo(this.bearings).setOrigin(this.origin),this.disable()},_drawPointer:function(t){this._pointer.setLatLngs([this.origin.getLatLng(),t.latlng])},_clearPointer:function(){this._pointer.setLatLngs([])},_onKeyDown:function(t){switch(t.keyCode){case 27:this.disable()}}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(1);t.Marker.Bearing=t.Marker.Traceroute.extend({initialize:function(e,i){this.trace=new t.Polyline([],i.trace),delete i.trace,this.on("move",this._decorate,this).on("move",this._draw,this),Object.getPrototypeOf(Object.getPrototypeOf(this)).initialize.call(this,e,i)},onAdd:function(t){this.trace.addTo(t),Object.getPrototypeOf(Object.getPrototypeOf(this)).onAdd.call(this,t)},onRemove:function(t){this.trace.remove(),Object.getPrototypeOf(Object.getPrototypeOf(this)).onRemove.call(this,t)},bearing:{},export:function(){return this.data.id=this._leaflet_id,this.fellow.origin instanceof t.Marker.Waypoint&&(this.data.origin_id=this.fellow.origin._leaflet_id),this.data},setOrigin:function(t){return this.fellow.origin=t,t.on("remove",this.remove,this).on("move remove",this._decorate,this).on("move remove",this._draw,this).registerBearing(this),this._decorate()._draw(),this},_decorate:function(){return this.data.position=this._latlng,this.fellow.origin instanceof t.Marker.Waypoint&&(this.data.qdr=Number(this.bearingTo(this.fellow.origin.getLatLng()).toPrecision(5)),this.data.qdm=Number(this.fellow.origin.bearingTo(this._latlng).toPrecision(5)),this.data.distance=Number(this.distanceTo(this.fellow.origin.getLatLng()).toPrecision(5))),this.toggleTooltip().toggleTooltip(),this},_draw:function(){return this.trace.setLatLngs([this._latlng,this.fellow.origin.getLatLng()]),this}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(16);t.Handler.TrackBase=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this._control=i,this.marker=new t.Marker.Trackpoint([],t.extend({},this.options.marker)).bindTooltip(this.options.marker.tooltip,{direction:"auto"}),this.trace=new t.Polyline([],this.options.trace),this.circle=new t.Circle([],this.options.circle)},addHooks:function(){this.target.style.filter="invert(1)",this._map.on("locationfound",this._locationFound,this).on("locationerror",this._locationError,this).locate(t.extend({watch:!0},this.options.locate)).fire("traceroute:track:start",this._control),this.trace.addTo(this._map)},removeHooks:function(){this.target.style.filter="invert(0)",this._map.stopLocate().fire("traceroute:track:stop",this._control).off("locationfound",this._locationFound,this).off("locationerror",this._locationError,this)},_locationFound:function(e){let i={};this._map.hasLayer(this.marker)&&(i={bearing:this.marker.bearing(e.latlng),estimatedSpeed:this.marker.distance(e.latlng)/Math.floor((e.timestamp-this.marker.position.timestamp)/1e3),vario:(this.marker.position.altitude-e.altitude)/Math.floor((e.timestamp-this.marker.position.timestamp)/1e3)}),this.marker.setLatLng(e.latlng).addTo(this._map).setOpacity(1).decorate(t.extend(i,e)),this.circle.setLatLng(e.latlng).addTo(this._map).setRadius(e.accuracy),this.trace.addTo(this._map).addLatLng(e.latlng),this._map.fire("traceroute:track:found",e)},_locationError:function(t){this.marker.setOpacity(.5).addTo(this._map),this._map.fire("traceroute:track:error",t)}})}).call(this,i(0))},function(t,e,i){"use strict";(function(t){i(1),i(3);t.Marker.Trackpoint=t.Marker.Traceroute.extend({decorate:function(t){this._extractLocation(t).setRotationAngle(t.heading||0).toggleTooltip().toggleTooltip()},_extractLocation:function(t){latitude,longitude,altitude,vario,accuracy,altitudeAccuracy,heading,bearing,estimatedSpeed,speed,timestamp;return this.data=(({...t})=>({...t}))(t),this}})}).call(this,i(0))},function(t,e,i){(function(t){t.Handler.ClearBase=t.Handler.extend({initialize:function(e,i,n){t.Util.setOptions(this,n),this._map=e,this._control=i},addHooks:function(){this.target.style.filter="invert(1)",this._control._routes.clearLayers(),this._control.options.tools.track.handler.trace.setLatLngs([]),this._map.fire("traceroute:clear",this._control),this.disable()},removeHooks:function(){this.target.style.filter="invert(0)"}})}).call(this,i(0))},function(t,e,i){var n=i(19);"string"==typeof n&&(n=[[t.i,n,""]]);var o={insert:"head",singleton:!1};i(21)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,i){(t.exports=i(20)(!1)).push([t.i,'.leaflet-traceroute {\n  font-family: "Lucida Console", Monaco, monospace;\n  font-weight: bold;\n  font-size: 22px;\n  filter: saturate(0%);\n}\n\n.leaflet-traceroute-icon {\n  display: inline-block;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  text-align: center;\n  vertical-align: middle;\n\n  font-size: xx-large;\n  text-shadow: 4px 4px 3px grey;\n}\n\n/* Waypoint icon */\n.leaflet-traceroute-point:before {\n  content: "⊙";\n  /* content: "◯"; */\n}\n\n/* Bearing Target icon */\n.leaflet-traceroute-losange:before {\n  content: "◇";\n}\n\n/* Midpoint icon */\n.leaflet-traceroute-arrow {\n  transform: rotateZ(-90deg);\n}\n.leaflet-traceroute-arrow:before {\n  content: "➤";\n  /* content: "➢"; */\n}\n\n/* Tracker icon */\n.leaflet-traceroute-airplane {\n  transform: rotateZ(-90deg);\n}\n.leaflet-traceroute-airplane:before {\n  content: "✈";\n}\n\n/* Alternative tracker icon */\n.leaflet-traceroute-helicopter:before {\n  content: "✇";\n  /*content: "⊛"; */\n}\n\n@keyframes revolution {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n.leaflet-traceroute-helicopter {\n  animation-name: revolution;\n  animation-duration: 1s;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n}\n.leaflet-traceroute-helicopter:hover{\n  animation-play-state: paused;\n}\n',""])},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var o=(a=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),r=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot).concat(t," */")}));return[i].concat(r).concat([o]).join("\n")}var a,s,c;return[i].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(i,"}"):i})).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(var a=0;a<t.length;a++){var s=t[a];null!=s[0]&&n[s[0]]||(i&&!s[2]?s[2]=i:i&&(s[2]="(".concat(s[2],") and (").concat(i,")")),e.push(s))}},e}},function(t,e,i){"use strict";var n,o={},r=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}();function s(t,e){for(var i=[],n={},o=0;o<t.length;o++){var r=t[o],a=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};n[a]?n[a].parts.push(s):i.push(n[a]={id:a,parts:[s]})}return i}function c(t,e){for(var i=0;i<t.length;i++){var n=t[i],r=o[n.id],a=0;if(r){for(r.refs++;a<r.parts.length;a++)r.parts[a](n.parts[a]);for(;a<n.parts.length;a++)r.parts.push(y(n.parts[a],e))}else{for(var s=[];a<n.parts.length;a++)s.push(y(n.parts[a],e));o[n.id]={id:n.id,refs:1,parts:s}}}}function l(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var n=i.nc;n&&(t.attributes.nonce=n)}if(Object.keys(t.attributes).forEach((function(i){e.setAttribute(i,t.attributes[i])})),"function"==typeof t.insert)t.insert(e);else{var o=a(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function p(t,e,i,n){var o=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var r=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function d(t,e,i){var n=i.css,o=i.media,r=i.sourceMap;if(o&&t.setAttribute("media",o),r&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var f=null,g=0;function y(t,e){var i,n,o;if(e.singleton){var r=g++;i=f||(f=l(e)),n=p.bind(null,i,r,!1),o=p.bind(null,i,r,!0)}else i=l(e),n=d.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r());var i=s(t,e);return c(i,e),function(t){for(var n=[],r=0;r<i.length;r++){var a=i[r],l=o[a.id];l&&(l.refs--,n.push(l))}t&&c(s(t,e),e);for(var h=0;h<n.length;h++){var u=n[h];if(0===u.refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete o[u.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,